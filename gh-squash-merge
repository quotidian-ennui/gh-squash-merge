#!/usr/bin/env bash
set -eo pipefail

WORK_FILE=$(mktemp --tmpdir squash-merge-commit-msg.XXXXXX)

cleanup() {
  if [[ -n "${WORK_FILE:-}" ]]; then
    rm -f "$WORK_FILE"
  fi
}

usage() {
  cat <<EOF

Usage: gh squash-merge [<number> | <url> | <branch>] [flags]

Issues a squash merge on the PR.

Without an argument, the pull request that belongs to the current branch
is used.

Arguments
  <number> The PR number to squash merge
  <url> The PR URL to squash merge
  <branch> The branch of PR URL to squash merge

Flags
      --admin                    Use administrator privileges to merge a pull request that does not meet requirement
      --auto                     Automatically merge only after necessary requirements are met
  -R, --repo [HOST/]OWNER/REPO   Select another repository using the [HOST/]OWNER/REPO format
      --dry-run                  dry run; in effect print the message that would be used for the squash commit

Notes:
- The title of the commit will be based on GitHub repository settings
- The PR body contains a section similar to the following which lets us autogenerate
  squash merge commit message
- If PR body does not contain a section similar an empty body will be set

<!-- SQUASH_MERGE_START -->
- this forms the body of the commit message and could be multiple lines
but generally we tend towards
- doc: conventional commit messages
<!-- SQUASH_MERGE_END -->

EXAMPLES
gh squash-merge
gh squash-merge 811
gh squash-merge --repo quotidian-ennui/gh-squash-merge 811
gh squash-merge https://github.com/quotidian-ennui/gh-squash-merge/pull/811
gh squash-merge feature/update

EOF
  exit 1
}

trap cleanup 1 2 15

additional_args=()

DRY_RUN=false
ARGS=$(getopt --options 'R::h' --longoptions 'repo:,help,admin,auto,dry-run' -- "${@}")
eval "set -- ${ARGS}"
while true; do
  case "${1}" in
  --dry-run)
    DRY_RUN=true
    shift
    ;;
  --h | --help)
    usage
    ;;
  --R | --repo)
    repo="${2}"
    shift 2
    ;;
  --admin | --auto)
    additional_args+=("${1}")
    shift
    ;;
  --)
    shift
    break
    ;;
  *)
    usage
    ;;
  esac
done

remaining_args=("${1}")

if [ -n "${repo:-}" ] && [ -z "${remaining_args:-}" ]; then
  echo "argument required when using the --repo flag"
  usage
fi

details_args=()

if [ -n "${repo:-}" ]; then
  details_args+=('--repo')
  details_args+=("${repo}")
fi

if [ -n "${remaining_args:-}" ]; then
  details_args+=("${remaining_args}")
fi

body=$(gh pr view --json body $"${details_args[@]}" --jq '.body')

echo "$body" | awk '/SQUASH_MERGE_START/,/SQUASH_MERGE_END/' | { grep -v "SQUASH_MERGE" || test $? = 1; } >"$WORK_FILE"
if [[ "$DRY_RUN" == "true" ]]; then
  title=$(gh pr view --json title $"${details_args[@]}" --jq '.title')
  echo -e "$title\n"
  cat "$WORK_FILE"
else
  gh pr merge $"${details_args[@]}" --delete-branch --squash --body-file "$WORK_FILE" $"${additional_args[@]}"
fi
cleanup
